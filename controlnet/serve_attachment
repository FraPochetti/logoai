#!/usr/bin/env python3

from share import *
import config

import cv2
import einops
import numpy as np
import torch
import random, logging, json, base64, boto3, uuid, zipfile
from botocore.exceptions import ClientError
from io import BytesIO
import gc
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from flask import Flask
from flask import Response
from flask import request

from pytorch_lightning import seed_everything
from annotator.util import resize_image, HWC3
from annotator.canny import CannyDetector
from cldm.model import create_model, load_state_dict
from cldm.ddim_hacked import DDIMSampler

logging.basicConfig()
logging.getLogger().setLevel(logging.INFO)


class Predictor:

    def __init__(self, config_path, weight_path):
        self.apply_canny = CannyDetector()
        model = create_model(str(config_path)).cpu()
        model.load_state_dict(load_state_dict(str(weight_path), location='cuda'))
        self.model = model.cuda()
        logging.info("Model loaded")
        self.ddim_sampler = DDIMSampler(self.model)
        logging.info("DDIM sampler loaded")
        with open('prompts.txt', 'r') as f:
            prompts = f.readlines()
            self.prompts = [p.strip() for p in prompts]
        #self.prompts = self.prompts[:3]
        logging.info(f"Running with {len(self.prompts)} prompts")


    def gen(self,
            input_image,
            a_prompt='',
            n_prompt='',
            num_samples=1,
            image_resolution=512,
            ddim_steps=20,
            guess_mode=False,
            strength=1.0,
            low_threshold=100,
            high_threshold=200,
            scale=9.0,
            seed=42,
            eta=0.0):
        for prompt in self.prompts:
            logging.info(f"Processing prompt: {prompt}")
            yield self.process(input_image=input_image,
                               prompt=prompt,
                               a_prompt=a_prompt,
                               n_prompt=n_prompt,
                               num_samples=num_samples,
                               image_resolution=image_resolution,
                               ddim_steps=ddim_steps,
                               guess_mode=guess_mode,
                               strength=strength,
                               low_threshold=low_threshold,
                               high_threshold=high_threshold,
                               scale=scale,
                               seed=seed,
                               eta=eta)



    def process(self,
                input_image: np.ndarray,
                prompt: str,
                a_prompt='',
                n_prompt='',
                num_samples=1,
                image_resolution=512,
                ddim_steps=20,
                guess_mode=False,
                strength=1.0,
                low_threshold=100,
                high_threshold=200,
                scale=9.0,
                seed=42,
                eta=0.0):
        with torch.no_grad():
            img = resize_image(HWC3(input_image), image_resolution)
            logging.info(f"Image resized to {img.shape}")
            H, W, _ = img.shape

            detected_map = self.apply_canny(img, low_threshold, high_threshold)
            detected_map = HWC3(detected_map)
            logging.info("Edges detected with Canny")

            control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0
            control = torch.stack([control for _ in range(num_samples)], dim=0)
            control = einops.rearrange(control, 'b h w c -> b c h w').clone()

            if seed == -1:
                seed = random.randint(0, 65535)
            seed_everything(seed)

            if config.save_memory:
                self.model.low_vram_shift(is_diffusing=False)

            cond = {"c_concat": [control], "c_crossattn": [self.model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}
            un_cond = {"c_concat": None if guess_mode else [control], "c_crossattn": [self.model.get_learned_conditioning([n_prompt] * num_samples)]}
            shape = (4, H // 8, W // 8)

            if config.save_memory:
                self.model.low_vram_shift(is_diffusing=True)

            self.model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01
            samples, _ = self.ddim_sampler.sample(ddim_steps, num_samples,
                                                  shape, cond, verbose=False, eta=eta,
                                                  unconditional_guidance_scale=scale,
                                                  unconditional_conditioning=un_cond)
            logging.info("ControlNet samples generated")
            if config.save_memory:
                self.model.low_vram_shift(is_diffusing=False)

            x_samples = self.model.decode_first_stage(samples)
            x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)

            results = [x_samples[i] for i in range(num_samples)]
        
        del samples, x_samples, control, cond, un_cond, detected_map
        return results


def parse_request(req: request):
    content = req.get_json()
    img = base64.b64decode(content['img_data'])
    img = np.frombuffer(img, np.uint8)
    img = cv2.imdecode(img, cv2.IMREAD_COLOR)

    email = content['email']
    s3_location = content['s3_location']
    logging.info(f"Processing image of size {img.shape} for {email} and save results to {s3_location}")
    return img, email, s3_location


def upload_to_s3(img, s3_location):
    sm_key = f"{s3_location}/{uuid.uuid4().hex}.jpeg"

    img = cv2.imencode('.png', img)[1].tobytes()
    S3.put_object(
        Bucket=SM_BUCKET,
        Key=sm_key,
        Body=img
    )
    logging.info(f"Uploaded image to s3://{SM_BUCKET}/{sm_key}")
    return f"s3://{SM_BUCKET}/{sm_key}"


def zip_images(s3_key_prefix):
    zip_file_name = f"{uuid.uuid4().hex}.zip"
    zip_buffer = BytesIO()

    with zipfile.ZipFile(zip_buffer, mode='w') as zip_file:
        for s3_object in S3.list_objects(Bucket=SM_BUCKET, Prefix=s3_key_prefix)['Contents']:
            if not s3_object['Key'].endswith('.jpeg'):
                continue

            file_content = S3.get_object(Bucket=SM_BUCKET, Key=s3_object['Key'])['Body'].read()
            zip_file.writestr(f"logo/{s3_object['Key'].split('/')[-1]}", file_content)

    zip_buffer.seek(0)
    with open(zip_file_name, 'wb') as f:
        f.write(zip_buffer.getvalue())

    zip_key = f"{'/'.join(s3_object['Key'].split('/')[:-1])}/{zip_file_name}"
    S3.upload_file(zip_file_name, SM_BUCKET, zip_key)
    logging.info(f"Uploaded zip file to s3://{SM_BUCKET}/{zip_key}")
    
    return zip_file_name


def send_email_to_user(recipient, zip_file_name):
    logging.info(f"Sending email to {recipient} with attached {zip_file_name}")
    try:
        msg = MIMEMultipart('mixed')
        msg['Subject'] = SUBJECT
        msg['From'] = SENDER
        msg['To'] = recipient
        msg_body = MIMEMultipart('alternative')
        textpart = MIMEText(BODY_TEXT.encode(CHARSET), 'plain', CHARSET)
        htmlpart = MIMEText(BODY_HTML.encode(CHARSET), 'html', CHARSET)

        msg_body.attach(textpart)
        msg_body.attach(htmlpart)

        # Full path to the file that will be attached to the email.
        ATTACHMENT = zip_file_name

        # Adding attachments
        att = MIMEApplication(open(ATTACHMENT, 'rb').read())
        att.add_header('Content-Disposition', 'attachment', filename=ATTACHMENT)

        msg.attach(msg_body)
        msg.attach(att)

        response = SES.send_raw_email(
                Source=SENDER,
                Destinations=[recipient],
                RawMessage={'Data': msg.as_string(),},
               )	
    except ClientError as e:
        logging.info(e.response['Error']['Message'])
    else:
        logging.info(f"Email sent! Message ID:{response['MessageId']}")
       
    return


app = Flask(__name__)
PREDICTOR = Predictor('./models/cldm_v15.yaml', './models/control_sd15_canny.pth')
S3 = boto3.client('s3')
SM_BUCKET = "visualneurons.com-logos-outputs"
SENDER = "fra.pochetti@gmail.com"
CHARSET = "UTF-8"
SES = boto3.client('ses', region_name="eu-west-1")
SUBJECT = "VisualNeurons.com - your personalised logos are ready!"

BODY_TEXT = ("VisualNeurons.com - your personalised logos are ready! \r\n"
             "Our AI artists finished crunching your image, and are quite pleased with the result. \r\n"
             "You can find your custom logos in the attached zip file."
             ""
            )
BODY_HTML = """
    <html>

    <head></head>

    <body>
        <h4>Our AI artists finished crunching your logo!</h4>
        <p>
            We asked them to be as creative as possible, and the results are really cool!
            <br>
            You can find your custom logos in the attached zip file.
            <br>
        </p>
    </body>

    </html>
    """ 



@app.route("/invocations", methods=["POST"])
def predict():
    input_image, recipient, s3_location = parse_request(request)
    logging.info("Image loaded. Processing...")
    out_gen = PREDICTOR.gen(input_image=input_image)

    images = []
    for res in out_gen:
        for img in res:
            images.append(upload_to_s3(img, s3_location))
    
    torch.cuda.empty_cache()
    gc.collect()

    zip_file_name = zip_images(s3_location)
    logging.info(f"Zipped images to {zip_file_name}")
    
    send_email_to_user(recipient, zip_file_name)

    return Response(response=json.dumps(images), status=200)


@app.route("/ping")
def ping(): return Response(response="OK", status=200)


app.run(host="0.0.0.0", port=8080)